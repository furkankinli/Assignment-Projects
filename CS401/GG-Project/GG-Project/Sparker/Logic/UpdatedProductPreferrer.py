from Sparker.SparkLogProcesser.SparkLogOperator import *
from Sparker.SparkLogProcesser.SparkLogReader import *
from Sparker.SparkLogProcesser.SparkLogAnalyzer import *
from Sparker.SparkLogProcesser.SparkLogFileHandler import *
from MainSrc.PythonVersionHandler import *
from Sparker.PySparkImports import *
import Sparker.SparkLogProcesser.SparkLogAnalyzer as SLA

def keyPairIds(id1, id2):
    return str(id1) + '_' + str(id2)

def keyIn(key, d):
    return key in list(d.keys())

def modulize(journey):
    modulized = {}
    for log in journey:
        if keyIn(log['module'], modulized):
            modulized[log['module']].append(log)
        else:
            modulized[log['module']] = [] 
    return modulized

def getUpdatedLabeledPairs(jour):
    journeys = jour.filter(lambda x: keyIn('_c', x)).sortBy(lambda x: x['timestamp']).groupBy(lambda x: x['_c']).collect()
    events = []

    def lookActions(action, journey):
        if action['module'] == 'cart' or action['module'] == 'payment' or action['module'] == 'item':
            journey = modulize(journey)
            id = action['id']
            if keyIn('search', journey):
                for log in journey['search']:
                    if keyIn('ids', log):
                        #print_(log['ids'])
                        if id in log['ids']:
                            #events.append({'product': action['id'], 'action': action['module'], 'others': log['ids']})
                            events.append((action['id'], action['module'], log['ids']))

    for c, journey in journeys:
        journey = list(journey)
        for i in range(4, len(journey)):
            lookActions(journey[i], journey[i-4:i])
            
    positive = 1
    negative = -1
    posPairs = []
    negPairs = []
    counts = {}
    labeledPairs = {}

    def posKey(id, module, otherId): return str((id, module, otherId))

    #idsSet = unique(list(map(lambda x: x['products'], events)))
    for id, module, others in events:
        for otherId in others:
            k = posKey(id, module, otherId)
            l = posKey(otherId, module, id)
            if keyIn(k, counts):
                counts[k] += 1
            else:
                counts[k] = 1
            posPairs.append((id, module, otherId, k))
            negPairs.append((otherId, module, id, l))

    for ke in list(counts.keys()):
        id, module, otherId = eval(ke)
        if id == otherId: continue
        if module == 'payment':
            rev = posKey(otherId, module, id)
            if keyIn(rev, counts):
                if counts[ke] > counts[rev]:
                    labeledPairs[keyPairIds(id, otherId)] = positive
                    labeledPairs[keyPairIds(otherId, id)] = negative
            else:
                labeledPairs[keyPairIds(id, otherId)] = positive
                labeledPairs[keyPairIds(otherId, id)] = negative
        elif module == 'cart' and not keyIn(posKey(id, 'payment', otherId), counts) and not keyIn(posKey(otherId, 'payment', id), counts):
            rev = posKey(otherId, module, id)
            if keyIn(rev, counts):
                if counts[ke] > counts[rev]:
                    labeledPairs[keyPairIds(id, otherId)] = positive
                    labeledPairs[keyPairIds(otherId, id)] = negative
            else:
                labeledPairs[keyPairIds(id, otherId)] = positive
                labeledPairs[keyPairIds(otherId, id)] = negative
        elif module == 'item' and not keyIn(posKey(id, 'payment', otherId), counts) and not keyIn(posKey(otherId, 'payment', id), counts) and not keyIn(posKey(id, 'cart', otherId), counts) and not keyIn(posKey(otherId, 'cart', id), counts):
            rev = posKey(otherId, module, id)
            if keyIn(rev, counts):
                if counts[ke] > counts[rev]:
                    labeledPairs[keyPairIds(id, otherId)] = positive
                    labeledPairs[keyPairIds(otherId, id)] = negative
            else:
                labeledPairs[keyPairIds(id, otherId)] = positive
                labeledPairs[keyPairIds(otherId, id)] = negative
             
             
    labeledPairs = sc_().parallelize([(key, v) for key, v in labeledPairs.items()])
    print_(labeledPairs.count(), 'labeled pairs have been generated by', nowStr())
    return labeledPairs